#! /usr/bin/env python

import argparse
import shutil
import subprocess
import sys
import os

from oclintscripts import environment
from oclintscripts import path
from oclintscripts import process
from oclintscripts import version
from oclintscripts import dd

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-reset', '--reset', action="store_true")
arg_parser.add_argument('-clang', '--clang', action="store_true")
arg_parser.add_argument('-oclint', '--oclint', action="store_true")
arg_parser.add_argument('-clean', '--clean', action="store_true")
arg_parser.add_argument('-pack', '--pack', action="store_true")
args = arg_parser.parse_args()

if args.reset:
    print("#### reset start")
    path.rm_f(path.build_root)
    path.rm_f(path.source.clang_dir)
    path.rm_f(path.source.countly_dir)
    path.rm_f(path.source.googletest_dir)
    path.rm_f(path.source.json_compilation_database_dir)
    path.rm_f(path.source.xcodebuild_dir)
    print("#### reset finished")
    sys.exit(0)

if args.clang:
    print("#### clang start")
    current_dir = os.getcwd()
    path.cd(path.root_dir)
    process.call('git clone ' + path.url.json_compilation_database)
    if environment.is_darwin():
        process.call('git clone ' + path.url.xcodebuild)
    path.cd(current_dir)
    process.call('python clang co -branch ' + dd.dd_llvm_release_branch())
    print("#### clang build")
    process.call('python clang build -release -clean')
    print("#### clang finished")
    sys.exit(0)

if args.oclint:
    print("#### oclint start")
    if args.clean:
        print("#### oclint -clean")
        process.call('python build -clean -release -no-ninja -no-analytics')
    else:
        print("#### oclint -not clean")
        process.call('python build -release -no-ninja -no-analytics')
    print("#### oclint finished")
    sys.exit(0)

if args.pack:
    print("#### pack start")
    process.call('./ddbundle')
    print("#### pack finished")
    sys.exit(0)


